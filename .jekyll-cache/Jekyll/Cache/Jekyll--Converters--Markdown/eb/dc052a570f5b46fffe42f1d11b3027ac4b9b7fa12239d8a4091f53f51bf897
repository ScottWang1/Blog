I"›	<h2 id="architecture">Architecture</h2>
<p><img src="http://localhost:4000/assets/images/arch.png" alt="å›¾ç‰‡pic1" /></p>

<p>Core layer: the core function of Kubernetes, providing API to build high-level applications externally, and providing plug-in application execution environment internally<br />
Application layer: deployment (stateless applications, stateful applications, batch tasks, cluster applications, etc.) and routing (service discovery, DNS resolution, etc.), Service Mesh (partially located in the application layer)</p>

<p>Management layer: system metrics (such as infrastructure, container and network metrics), automation (such as automatic scaling, dynamic Provision, etc.) and policy management (RBAC, Quota, PSP, NetworkPolicy, etc.), Service Mesh (partially located in the management layer)</p>

<p>Interface layer: kubectl command line tool, client SDK and cluster federation</p>

<p>Ecosystem: The ecosystem of large container cluster management and scheduling above the interface layer can be divided into two categories</p>

<p>Outside of Kubernetes: logs, monitoring, configuration management, CI/CD, Workflow, FaaS, OTS applications, ChatOps, GitOps, SecOps, etc.</p>

<p>Inside Kubernetes: CRI, CNI, CSI, mirror warehouse, Cloud Provider, configuration and management of the cluster itself, etc.</p>
<h2 id="api">API</h2>
<p>For cloud computing systems, the system API is actually in the dominance of system design. As mentioned earlier in this article, every time a new function is supported by the Kubernetes cluster system, a new technology will be introduced, and the corresponding API object will be newly introduced to support the Function management operation.<br />
1.All APIs should be declarative<br />
  2.API objects are complementary and composable<br />
  3.High-level APIs are designed based on operational intent<br />
  4.The low-level API is designed according to the control needs of the high-level API  <br />
  5.Try to avoid simple encapsulation and do not have internal hiding mechanisms that are not explicitly known by external APIs<br />
  6.API operation complexity is proportional to the number of objects<br />
  7.API object state cannot depend on network connection state<br />
  8.Try to avoid making the operation mechanism dependent on the global state, because it is very difficult to ensure the synchronization of the global state in a distributed system</p>

<p><a href="./">back</a></p>
:ET