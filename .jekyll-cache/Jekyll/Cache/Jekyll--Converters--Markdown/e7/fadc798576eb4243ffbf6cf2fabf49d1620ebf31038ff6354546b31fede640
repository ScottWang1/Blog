I"`<h2 id="maven-environment-configuration">Maven environment configuration</h2>
<p>First you need to <a href="http://maven.apache.org/download.cgi">download the Maven</a>, what i’am using is the MacOS, so i input:</p>
<pre><code class="language-$xslt"># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
# tar -xvf  apache-maven-3.3.9-bin.tar.gz
# sudo mv -f apache-maven-3.3.9 /usr/local/
</code></pre>
<h2 id="maven-pom">Maven POM</h2>
<p>POM (Project Object Model, Project Object Model) is the basic unit of work of Maven project, is an XML file, contains the basic information of the project, used to describe how the project is built, declare the project dependencies, and so on.
When executing a task or goal, Maven looks for the POM in the current directory. It reads the POM, obtains the required configuration information, and then executes the target.
The following configurations can be specified in POM:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Project dependency
Plugin
Execution goals
Project build profile
Project version
List of project developers
Related mailing list information
</code></pre></div></div>
<p>All POM files require a project element and three required fields: groupId, artifactId, and version. For example:</p>
<pre><code class="language-$xslt">&lt;project xmlns = "http://maven.apache.org/POM/4.0.0"
    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   
    &lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt;    
    &lt;artifactId&gt;project&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
&lt;/project&gt;
</code></pre>
<p>Super POM is Maven’s default POM. All POMs inherit from a super POM. The super POM contains some default settings that can be inherited. Therefore, when Maven finds that it needs to download the dependencies in the POM, it will go to the default repository http://repo1.maven.org/maven2 configured in Super POM to download.</p>
<h2 id="maven-build-life-cycle">Maven build life cycle</h2>
<p>The Maven build life cycle defines a project build and release process.
A typical Maven build life cycle is composed of a sequence of the following stages:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Validate : project Validate the project is correct and all required information is available
Compile : compilation Source code compilation is completed at this stage
Test : Use the appropriate unit test framework (such as JUnit) to run the test.
Package : create JAR/WAR package as defined in pom.xml
verify : the results of the integration test to ensure that the quality is up to standard
Install : the packaged project to a local warehouse for use by other projects
Deploy : copy the final project package to the remote repository to share with other developers and projects
</code></pre></div></div>
<h2 id="maven-build-configuration-file">Maven build configuration file</h2>
<p>Maven build configuration file
The build configuration file is a series of configuration item values that can be used to set or override Maven build default values.
Using the build configuration file, you can customize the build method for different environments, such as production environment and development environment.
The configuration file is specified in the pom.xml file using activeProfiles or profiles elements, and can be triggered in various ways. The configuration file modifies the POM during construction and is used to set different target environments for the parameters</p>
<h2 id="maven-repository">Maven repository</h2>
<p>In Maven terminology, a warehouse is a place.
The Maven repository is a third-party library that the project depends on. The location of this library is called the repository.
In Maven, the output of any dependency, plugin, or project build can be called a component.
The Maven repository can help us manage components (mainly JAR), it is where all JAR files (WAR, ZIP, POM, etc.) are placed.
There are three types of Maven repositories:</p>
<h5 id="local">Local</h5>
<p>Maven’s local repository will not be created after Maven is installed. It is created when the maven command is executed for the first time.
When running Maven, any components needed by Maven are obtained directly from the local repository. If the local warehouse does not have it, it will first try to download the components from the remote warehouse to the local warehouse, and then use the components of the local warehouse.
By default, regardless of Linux or Windows, each user has a repository directory with a path name of .m2/respository/ in their own user directory.</p>
<h5 id="central">Central</h5>
<p>The Maven central warehouse is a warehouse provided by the Maven community, which contains a large number of commonly used libraries.
The central warehouse contains most popular open source Java components, as well as source code, author information, SCM, information, license information, etc. In general, the components that a simple Java project depends on can be downloaded here.
The key concepts of the central warehouse:
This warehouse is managed by the Maven community.
No configuration is required.
You need to access it through the network.
To browse the contents of the central warehouse, the maven community provides a <a href="http://maven.apache.org/download.cgi">URL</a>. Using this repository, developers can search all available code bases.</p>
<h5 id="remote">Remote</h5>
<p>If Maven cannot find the dependent files in the central repository, it will stop the build process and output an error message to the console. To avoid this situation, Maven provides the concept of a remote warehouse, which is a custom warehouse for developers, which contains the required code base or jar files used in other projects.
For example, using the following pom.xml, Maven will download the dependent (not available in the central repository) file declared in the pom.xml from the remote repository.</p>
:ET